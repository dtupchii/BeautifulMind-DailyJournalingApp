// <auto-generated />
using System;
using DailyJournaling.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DailyJournaling.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DailyJournaling.API.Models.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GratitudeRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AnswerId");

                    b.HasIndex("GratitudeRecordId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.DayPart", b =>
                {
                    b.Property<Guid>("DayPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("DayPartId");

                    b.ToTable("DayParts");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.GratitudeRecord", b =>
                {
                    b.Property<Guid>("GratitudeRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DayPartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoodStateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("GratitudeRecordId");

                    b.HasIndex("DayPartId");

                    b.HasIndex("MoodStateId");

                    b.HasIndex("UserId");

                    b.ToTable("GratitudeRecords");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.MoodState", b =>
                {
                    b.Property<Guid>("MoodStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("MoodStateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MoodStateId");

                    b.ToTable("MoodStates");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DayPartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.HasIndex("DayPartId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.Answer", b =>
                {
                    b.HasOne("DailyJournaling.API.Models.GratitudeRecord", "GratitudeRecord")
                        .WithMany("Answers")
                        .HasForeignKey("GratitudeRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyJournaling.API.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GratitudeRecord");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.GratitudeRecord", b =>
                {
                    b.HasOne("DailyJournaling.API.Models.DayPart", "DayPart")
                        .WithMany("GratitudeRecords")
                        .HasForeignKey("DayPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyJournaling.API.Models.MoodState", "MoodState")
                        .WithMany("GratitudeRecords")
                        .HasForeignKey("MoodStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyJournaling.API.Models.User", "User")
                        .WithMany("GratitudeRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayPart");

                    b.Navigation("MoodState");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.Question", b =>
                {
                    b.HasOne("DailyJournaling.API.Models.DayPart", "DayPart")
                        .WithMany("Questions")
                        .HasForeignKey("DayPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayPart");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.DayPart", b =>
                {
                    b.Navigation("GratitudeRecords");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.GratitudeRecord", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.MoodState", b =>
                {
                    b.Navigation("GratitudeRecords");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.User", b =>
                {
                    b.Navigation("GratitudeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
