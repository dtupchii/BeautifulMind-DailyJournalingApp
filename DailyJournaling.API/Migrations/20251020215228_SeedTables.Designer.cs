// <auto-generated />
using System;
using DailyJournaling.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DailyJournaling.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251020215228_SeedTables")]
    partial class SeedTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DailyJournaling.API.Models.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GratitudeRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AnswerId");

                    b.HasIndex("GratitudeRecordId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.DayPart", b =>
                {
                    b.Property<Guid>("DayPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("DayPartId");

                    b.ToTable("DayParts");

                    b.HasData(
                        new
                        {
                            DayPartId = new Guid("ae21d84f-1f1a-4d63-a1cd-edcc41722a6c"),
                            Name = "Morning",
                            StartTime = new TimeSpan(0, 4, 0, 0, 0)
                        },
                        new
                        {
                            DayPartId = new Guid("1471dab9-6624-4598-aee7-39c73a830d81"),
                            Name = "Evening",
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("DailyJournaling.API.Models.GratitudeRecord", b =>
                {
                    b.Property<Guid>("GratitudeRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DayPartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoodStateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("GratitudeRecordId");

                    b.HasIndex("DayPartId");

                    b.HasIndex("MoodStateId");

                    b.HasIndex("UserId");

                    b.ToTable("GratitudeRecords");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.MoodState", b =>
                {
                    b.Property<Guid>("MoodStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("MoodStateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MoodStateId");

                    b.ToTable("MoodStates");

                    b.HasData(
                        new
                        {
                            MoodStateId = new Guid("8a4381c7-c442-4404-aa78-951edba66a75"),
                            MoodStateName = "Very Happy"
                        },
                        new
                        {
                            MoodStateId = new Guid("51ad2c99-aaf3-4cca-9456-776e3792d9c9"),
                            MoodStateName = "Happy"
                        },
                        new
                        {
                            MoodStateId = new Guid("dd074df2-ea0d-4dec-a49a-e788648d98cc"),
                            MoodStateName = "Neutral"
                        },
                        new
                        {
                            MoodStateId = new Guid("8c26e8d6-1aa5-434e-8391-4079cbc05594"),
                            MoodStateName = "Unhappy"
                        },
                        new
                        {
                            MoodStateId = new Guid("7b2ba7ce-a5c4-4191-bb11-d73f2cbf80d8"),
                            MoodStateName = "Very Unhappy"
                        });
                });

            modelBuilder.Entity("DailyJournaling.API.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DayPartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.HasIndex("DayPartId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("9d8e61ee-6e3a-48ed-9a78-67ce730c403e"),
                            DayPartId = new Guid("ae21d84f-1f1a-4d63-a1cd-edcc41722a6c"),
                            Text = "This morning I am grateful for..."
                        },
                        new
                        {
                            QuestionId = new Guid("68218811-3cc8-46fe-b957-5682066e8b6c"),
                            DayPartId = new Guid("ae21d84f-1f1a-4d63-a1cd-edcc41722a6c"),
                            Text = "What would make today great?"
                        },
                        new
                        {
                            QuestionId = new Guid("b6f127ac-d9a6-4337-8eb9-3d54c5a3e4cc"),
                            DayPartId = new Guid("ae21d84f-1f1a-4d63-a1cd-edcc41722a6c"),
                            Text = "Daily affirmation"
                        },
                        new
                        {
                            QuestionId = new Guid("82c51f06-656c-4261-a941-d6e97cef27fe"),
                            DayPartId = new Guid("1471dab9-6624-4598-aee7-39c73a830d81"),
                            Text = "Highlights of the Day"
                        },
                        new
                        {
                            QuestionId = new Guid("fd1c739e-20ab-4212-ae9d-ddfa49140e43"),
                            DayPartId = new Guid("1471dab9-6624-4598-aee7-39c73a830d81"),
                            Text = "What did I learn today?"
                        });
                });

            modelBuilder.Entity("DailyJournaling.API.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.Answer", b =>
                {
                    b.HasOne("DailyJournaling.API.Models.GratitudeRecord", "GratitudeRecord")
                        .WithMany("Answers")
                        .HasForeignKey("GratitudeRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyJournaling.API.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GratitudeRecord");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.GratitudeRecord", b =>
                {
                    b.HasOne("DailyJournaling.API.Models.DayPart", "DayPart")
                        .WithMany("GratitudeRecords")
                        .HasForeignKey("DayPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyJournaling.API.Models.MoodState", "MoodState")
                        .WithMany("GratitudeRecords")
                        .HasForeignKey("MoodStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyJournaling.API.Models.User", "User")
                        .WithMany("GratitudeRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayPart");

                    b.Navigation("MoodState");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.Question", b =>
                {
                    b.HasOne("DailyJournaling.API.Models.DayPart", "DayPart")
                        .WithMany("Questions")
                        .HasForeignKey("DayPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayPart");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.DayPart", b =>
                {
                    b.Navigation("GratitudeRecords");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.GratitudeRecord", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.MoodState", b =>
                {
                    b.Navigation("GratitudeRecords");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DailyJournaling.API.Models.User", b =>
                {
                    b.Navigation("GratitudeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
